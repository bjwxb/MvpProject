package com.wxb.mvp.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wxb.mvp.model.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Member_nickname = new Property(3, String.class, "member_nickname", false, "MEMBER_NICKNAME");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Headportraits = new Property(5, String.class, "headportraits", false, "HEADPORTRAITS");
        public final static Property Member_name = new Property(6, String.class, "member_name", false, "MEMBER_NAME");
        public final static Property Hx_login = new Property(7, String.class, "hx_login", false, "HX_LOGIN");
        public final static Property Member_avatar = new Property(8, String.class, "member_avatar", false, "MEMBER_AVATAR");
        public final static Property Key = new Property(9, String.class, "key", false, "KEY");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"MEMBER_NICKNAME\" TEXT," + // 3: member_nickname
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"HEADPORTRAITS\" TEXT," + // 5: headportraits
                "\"MEMBER_NAME\" TEXT," + // 6: member_name
                "\"HX_LOGIN\" TEXT," + // 7: hx_login
                "\"MEMBER_AVATAR\" TEXT," + // 8: member_avatar
                "\"KEY\" TEXT);"); // 9: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String member_nickname = entity.getMember_nickname();
        if (member_nickname != null) {
            stmt.bindString(4, member_nickname);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String headportraits = entity.getHeadportraits();
        if (headportraits != null) {
            stmt.bindString(6, headportraits);
        }
 
        String member_name = entity.getMember_name();
        if (member_name != null) {
            stmt.bindString(7, member_name);
        }
 
        String hx_login = entity.getHx_login();
        if (hx_login != null) {
            stmt.bindString(8, hx_login);
        }
 
        String member_avatar = entity.getMember_avatar();
        if (member_avatar != null) {
            stmt.bindString(9, member_avatar);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(10, key);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String member_nickname = entity.getMember_nickname();
        if (member_nickname != null) {
            stmt.bindString(4, member_nickname);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String headportraits = entity.getHeadportraits();
        if (headportraits != null) {
            stmt.bindString(6, headportraits);
        }
 
        String member_name = entity.getMember_name();
        if (member_name != null) {
            stmt.bindString(7, member_name);
        }
 
        String hx_login = entity.getHx_login();
        if (hx_login != null) {
            stmt.bindString(8, hx_login);
        }
 
        String member_avatar = entity.getMember_avatar();
        if (member_avatar != null) {
            stmt.bindString(9, member_avatar);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(10, key);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // member_nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headportraits
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // member_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hx_login
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // member_avatar
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMember_nickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadportraits(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMember_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHx_login(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMember_avatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
