apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyyMMdd-HH-mm-ss", TimeZone.getTimeZone("GMT+8"))
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.wxb"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        buildConfigField 'boolean', 'IS_ALI', 'true'
        flavorDimensions "default"

        // true:检查res资源是否规范
//        aaptOptions.cruncherEnabled = false
//        aaptOptions.useNewCruncher = false

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            storeFile file(STORE_FILE)
            storePassword STORE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件//true-remove
            shrinkResources false
            //加载默认混淆配置文件 progudard-android.txt在sdk目录里面，不用管，proguard.cfg是我们自己配<span></span>的混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
//            signingConfig signingConfigs.release
//            resValue "string", "app_name", rootProject.ext.app_name

        }

        debug {
            //给applicationId添加后缀“.debug”
//            applicationIdSuffix ".debug"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            //签名
//            signingConfig signingConfigs.release
//            resValue "string", "app_name", rootProject.ext.app_name_dev
//            manifestPlaceholders = [APP_NAME: "MP-debug"]
        }
    }

//    greendao {
//        schemaVersion 1
//        daoPackage 'com.wxb.mvp.model.dao'
//        targetGenDir 'src/main/java'
//    }

    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage', 'MissingTranslation', 'CheckResult', 'GoogleAppIndexingWarning'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
//            resValue "string", "app_name", rootProject.ext.app_name_dev
        }

        tst {
            applicationIdSuffix ".test"
        }

        prod {
            applicationIdSuffix ".prod"
        }

        xiaomi {}
        vivo {}
        oppo {}
        baidu {}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [channel: name]
    }

//    android.applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = outputFile.name.replace("app", "${defaultConfig.applicationId}-${versionName}")
//                output.outputFile = new File(outputFile.parent, fileName)
//            }
//        }
//    }

    sourceSets {
        main {
            //main同级建立渠道文件夹，适配不同资源，如tst/res
            res.srcDirs = ['src/main/res']

            //适配不同assets源文件
            assets.srcDirs = ['src/main/assets']

            tst {
                assets.srcDirs = ['src/tst/assets']
            }

            dev {
                assets.srcDirs = ['src/dev/assets']
            }

            prod {
                assets.srcDirs = ['src/prod/assets']
            }

        }
    }

}

//test
apply from: "prebuild.gradle"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':basiclib')
    annotationProcessor rootProject.ext.dependencies['dagger-compiler']
    annotationProcessor rootProject.ext.dependencies['butterknife-compiler']
    annotationProcessor rootProject.ext.dependencies['glide-compiler']

//    if (!isModule.toBoolean()) {
//        implementation project(':module_main')
//    }

}
